//
//  Csharp.swift
//  IteaIOSDip
//
//  Created by alexey sorochan on 12/2/19.
//  Copyright © 2019 alexey sorochan. All rights reserved.
//

import Foundation

func ccharpDescription() -> CoursesTypeDescription {
    let sharp = CoursesTypeDescription()
    sharp.typeDescription = """
    — это комплексная программа обучения языка С# с нуля, которая включает широкий диапазон практических занятий, на которых вы научитесь работать со сборками, пространствами имен и рефлексией, узнаете о сериализации и коллекции, ограничении в обобщении, ознакомитесь с делегатами и событиями, а также научитесь правильно проводить стандартные операции запросов, фильтрацию, сортировку и группировку;
    Язык C# — это язык ООП, которая широко используется для разработки надежных и устойчивых приложений для Windows, Windows Mobile, а также для программирования игр с использованием Unity.
    При условии успешного окончания курса С#, вы получите предложение пройти стажировку с возможностью дальнейшего трудоустройства в одной из компаний-партнеров ITEA.
    """
    sharp.typeLevelDescription = """
    •    Использовать основные структуры данных для разработки программ
    •    Использовать ООП-методологии для разработки программ
    •    Создавать простые приложения на C#, используя классы со сложной иерархией
    •    Работать с интерфейсами и модификаторами доступа
    •    Разбираться в уже написанных приложениях
    •    Быть самостоятельным C#-программистом как в команде разработчиков, так и на фрилансе
    •    Уметь разбивать большие задачи на отдельные процессы, планировать и правильно оценивать время для выполнения задач
    """
    return sharp
}

func sharpCoursesDescrioption() -> [CourseDescription] {
    let base = CourseDescription()
    base.courseDescriotion = """
    В ходе базового курса вы изучите C# с нуля, а также познакомитесь с Microsoft .NET Framework и объектно-ориентированным программированием (ООП). Уроки C# позволят рассмотреть основные понятия и структуру программы, созданной с помощью данной технологии. Также в ходе программы вы рассмотрите типы, определяемые пользователем, научитесь отличать структуры от классов, ознакомитесь с конструкторами и деструкторами, узнаете о сборщике мусора. С# для начинающих станет базисом для дальнейшего изучения этого языка программирования и начала карьеры разработчика.
    """
    base.courseSkills = """
    •    Создавать простые приложения на C#, используя классы со сложной иерархией
    •    Работать с интерфейсами и модификаторами доступа
    •    Ориентироваться в основных понятиях ООП
    •    Разбираться в уже написанных приложениях
    •    Перейти к изучению программы расширенного курса
    """
    base.courseProgram = """
    •    Знакомство с платформой .NET и языком программирования C#
    ◦    Обзор платформы .NET Framework
    ◦    Знакомство c языком C#
    ◦    Обзор возможностей языка
    ◦    Знакомство c IDE Visual Studio
    ◦    Структура программы.
    ◦    Компиляция программы
    ◦    Написание первой программы
    ◦    Типы проектов
    •    Типы данных
    ◦    Устройство памяти в компьютере
    ◦    Системы счисления
    ◦    Как хранятся данные в памяти
    ◦    Понятие переменной
    ◦    Типы переменных
    ◦    Создание и инициализация переменных.
    ◦    Область видимости
    ◦    Константы
    ◦    Операции над базовыми типами
    •    Основы работы с системой контроля версий
    •    Условные конструкции
    ◦    Понятие условных конструкций
    ◦    Условная конструкция if
    ◦    Оператор многозначного выбора switch…case
    •    Циклические конструкции
    ◦    Знакомство с циклами
    ◦    Цикл с предусловием while
    ◦    Цикл с постусловием do…while
    ◦    Цикл со счетчиком for
    •    Методы
    ◦    Понятие метода
    ◦    Создание метода
    ◦    Вызов метода
    ◦    Виды методов с параметрами и без
    ◦    Модификаторы out и ref
    ◦    Рекурсия
    ◦    Метод Main
    •    Массивы
    ◦    Понятие массивов и необходимость их использования
    ◦    Способы создания массивов
    ◦    Работа с массивами
    ◦    Многомерные массивы
    ◦    Зубчатые массивы
    •    Введение в ООП. Понятия классов и объектов
    ◦    Понятие класса и объекта
    ◦    Создание классов, их содержимое
    ◦    Создание объектов с помощью классов
    ◦    Модификаторы доступа
    ◦    Работа со свойствами
    ◦    Автоматически реализуемые свойства
    ◦    Конструкторы пользовательские и по умолчанию
    ◦    Частичные классы и методы
    •    Наследование и полиморфизм
    ◦    Понятие наследования
    ◦    Реализация наследования
    ◦    Базовый тип Object
    ◦    Upcast и DownCast
    ◦    Понятие и реализация полиморфизма
    ◦    Виртуальные методы
    •    Абстракция и интерфейсы
    ◦    Понятие абстракции
    ◦    Создание абстрактных классов
    ◦    Работа с абстрактными методами
    ◦    Наследование от абстрактных классов
    ◦    Понятие интерфейса
    ◦    Создание и реализация интерфейсов
    •    Статические классы и методы
    ◦    Создание и вызов статических методов
    ◦    Работа со статическими методами
    ◦    Создание статических классов
    ◦    Необходимость в статических классах
    ◦    Расширяющие методы
    •    Структуры. Перечисления
    ◦    Понятие структур и необходимость в них
    ◦    Создание структур и работа с ними
    ◦    Отличия структур от классов
    ◦    Понятие перечислений
    ◦    Область применения перечислений
    •    Исключительные ситуации
    ◦    Понятие исключительных ситуаций
    ◦    Обработка исключений, конструкция try, catch, finally
    ◦    Создание своих классов исключений
    ◦    Множественная обработка исключений
    •    Сборщик мусора

    """
    let advanced = CourseDescription()
    advanced.courseDescriotion = """
    В ходе курса Вы изучите язык программирования C#. Научитесь работать со сборками, пространствами имен и рефлексией, узнаете о сериализации и коллекциях, ограничениях в обобщении.
    Мы научим Вас производить стандартные операции запросов, фильтрацию, сортировку и группировку. Благодаря курсу Вы ознакомитесь с делегатами и узнаете о событиях, будете работать с потоками.
    """
    advanced.courseSkills = """
    •    Углубить знания о C# и стать подготовленным специалистом
    •    Создавать приложения на C#, используя все возможности языка, обработку исключений, делегаты, работу с потоками
    """
    advanced.courseProgram = """
    Коллекции
        •    Основные типы сложных структур данных: список, очередь, стек, словарь, множество
        •    Интерфейсы, которые поддерживаются различными коллекциями
        •    Инициализаторы коллекций
        •    Создание пользовательских коллекций
    Обобщения
        •    Повторное использование кода и значение обобщений в нем
        •    Ограничения в обобщениях
        •    Обобщенные интерфейсы
    Работа с системой контроля версий
        •    Делегаты, события, лямбда-выражения
        •    Понятие делегата
        •    Объявление делегатов
        •    Анонимные методы
        •    Лямбда-выражения
        •    События
    LINQ
        •    Стандартные операции запросов. Фильтрация. Сортировка. Группировка
        •    Анонимные и динамические типы
        •    Подключение к базе данных
    EntityFramework
        •    Подключение Nuget-пакетов к проекту
        •    Основы работы с БД
        •    Подключение БД к проекту
        •    Создание миграций
        •    LINQ to SQL
    Ввод-вывод. Сериализация. XML
        •    Библиотека System.IO
        •    Работа с JSON
        •    Понятие сериализации. Сериализация в JSON. Реализация собственных методов для сериализации
    Сборки, пространства имен, атрибуты, директивы препроцессора, рефлексия
        •    Пространства имен
        •    Сборки. Глобальный кэш сборок
        •    Директивы препроцессора
        •    Атрибуты. Создание пользовательских атрибутов
        •    Рефлексия
    Потоки, задачи, синхронизация
        •    Проблема распределенных вычислений, многоядерности
        •    Асинхронные Делегаты
        •    Классы Thread, Task
        •    Проблемы, возникающие при параллельных вычислениях.
        •    Классы отвечающие за синхронизацию
    .NET Core
        •    Обзор возможностей
        •    Основы WEB-разработки
        •    Создание приложения
    Unit-тестирование
        •    Unit Testing Framework
        •    Тестирование закрытых и статических методов
        •    Тестирование корректной работы бизнес-логики
        •    Интеграционные тесты
    Сдача проектов

    """
    let net = CourseDescription()
       net.courseDescriotion = """
        В данном курсе вы познакомитесь с современной кросс-платформенной web-разработкой с использованием платформы .NET Core и языка программирования C#. На протяжении обучения вы изучите и закрепите на практике основные аспекты разработки веб-приложений, ознакомитесь с архитектурным стилем REST и подходами, используемыми для создания серверной архитектуры приложений. В ходе изучения вы напишете приложение, используя паттерн проектирования MVC, спроектируете базу данных и разработаете простой UI с использованием современных фронтенд-библиотек.
       """
       net.courseSkills = """
        •    Претендовать на позицию Junior Backend Developer.
        •    Разрабатывать производительные кроссплатформенные веб-приложения с использованием .NET Core
       """
       net.courseProgram = """
        •    Введение в .Net Core
        ◦    Виды проектов
        ◦    Создание проекта
        ◦    Базовые классы (Program, Startup)
        •    Работа с Git
        ◦    Создание репозитория для проекта в Github
        ◦    Добавление CI с использованием Appveyor
        •    Базовые понятия
        ◦    Паттерн MVC (Model-View-Controller)
        ◦    Инверсия контроля (Inversion of control)
        ◦    Внедрение зависимостей (Dependency Injection)
        •    Модель (Model)
        ◦    Использование Entity Framework Core
        ◦    Добавление базы данных
        ◦    Создания таблиц
        ◦    Создание связей между сущностями
        ◦    Написание запросов с использованием LINQ
        ◦    Использование паттерна Repository
        •    Контроллеры (Controller)
        ◦    Архитектурный стиль RESTful
        ◦    Роутинг
        ◦    Авторизация и аутентификация в приложении
        ◦    Разделение логики обработки запросов в контроллерах
        •    Отправка уведомлений пользователю
        ◦    Email-рассылка с использованием SMTP-сервера
        ◦    Sms-рассылка с использованием сервиса Twilio
        •    Middleware-компоненты
        ◦    Понятие middleware
        ◦    Работа с контекстом запроса
        ◦    Создание и подключение middleware
        •    Фоновые задачи
        ◦    Понятие фоновой задачи
        ◦    Рассмотрение hosted-сервисов
        ◦    Создание и подключение фоновых задач
        •    Протокол WS
        ◦    Рассмотрение WebSocket
        ◦    Создание live-чатов с использованием сокетов
        •    Кэширование данных
        ◦    Добавление кэширования в контроллеры
        ◦    Использование Redis для кэширования данных
        •    Добавление юнит-тестов
        •    Создание визуальной части сайта, работа с HTML5, CSS3, JS
        •    Рассмотрение современных фронтенд библиотек/фреймворков
        •    Развертывание приложения
        ◦    Конфигурации приложения для запуска на хостинге
        ◦    Добавление App Service на Azure
        ◦    Использование Azure Pipelines для Continuous Deployment

       """

    
    return [base, advanced, net]
}
