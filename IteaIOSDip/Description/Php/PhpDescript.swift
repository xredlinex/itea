//
//  Php.swift
//  IteaIOSDip
//
//  Created by alexey sorochan on 12/2/19.
//  Copyright © 2019 alexey sorochan. All rights reserved.
//

import Foundation

func phpTypeDescription() -> CoursesTypeDescription {
    let php = CoursesTypeDescription()
    php.typeDescription = """
    Курсы PHP
    — это комплексная двухуровневая программа обучения PHP,  после изучения которой вы сможете претендовать на вакансию Junior-специалиста и зарплату от 300 $/мес. Что такое PHP? Язык PHP – скриптовый язык программирования веб-приложений. Среда разработки PHP применяется для написания динамических веб-сайтов, социальных сетей, блогов, в сфере электронной коммерции. В качестве примеров, написанных на PHP, можно назвать Википедию, Facebook, Flickr, Twitter, WordPress, Drupal, а также фреймворки Zend, Symfony, Yii. PHP-разработчики успешно строят карьеру как на фриланс-биржах, так и в прогрессивных IT-компаниях. Roadmap PHP ведут специалисты-практики из крупнейших компаний, а уроки PHP  разработаны по принципу «минимум теории и максимум практики».
    """
    php.typeLevelDescription = """
    •    Проектировать архитектуру приложений
    •    Создавать и работать с базами данных
    •    Использовать основные паттерны проектирования при разработке программ
    •    Разрабатывать программы с использованием ООП-методологии и MVC-паттерна
    •    Использовать фреймворки и CMS-системы для разработки веб-приложений
    •    Управлять и настраивать веб-серверы
    •    Загружать и разворачивать проекты на веб-хостинге
    •    Работать PHP-программистом и в команде разработчиков, и на фрилансе
    •    Разбивать задачи на отдельные процессы, эффективно планировать время на выполнение задач
    """
    return php
}

func phpCoursesDescrioption() -> [CourseDescription] {
    let fundomentals = CourseDescription()
    fundomentals.courseDescriotion = """
    Курс Основы Программирования – программа обучения базовым знаниям разработки программного обеспечения, которые нужны начинающему IT-специалисту. Курс поможет освоить фундаментальные аспекты программирования, которые необходимы для понимания принципов, на которых основывается весь процесс создания какого-либо программного обеспечения. После прохождения курса вы сможете выбрать направление в IT, которое лучше всего подходит вам. Курс подготовит к дальнейшему изучению JavaScript, PHP, Java, C#, C++.
    """
    fundomentals.courseSkills = """
    •    Анализировать задачу и строить алгоритмы программы, используя условные и циклические конструкции
    •    Работать с переменными и реализовывать несложные математические операции
    •    Работать с функциями, событиями
    •    Анализировать и объяснять поведение простых программ, включающих конструкции, рассмотренные в курсе
    •    Работать с одномерными и двумерными массивами данных
    •    Реализовывать элементарные web-страницы с элементами управления
    """
    fundomentals.courseProgram = """
    •    Обзор языков программирования
    ◦    Обзор парадигм программирования
    ◦    Обзор современных языков программирования
    •    Понятие алгоритма
    ◦    Роль алгоритма в решении задач
    ◦    Понятие и свойства алгоритма
    ◦    Типы алгоритмов
    •    Базовые конструкции программирования:
    ◦    понятие синтаксиса и семантики языков программирования
    ◦    переменные, типы данных, выражения и присваивание значений переменным
    ◦    представление данных в памяти компьютера: биты, байты и т.п.
    ◦    простейший ввод/вывод
    ◦    условные конструкции и их разновидности
    ◦    итеративные конструкции (циклы):
    ▪    циклы с предусловием
    ▪    циклы с постусловием
    ▪    циклы с известным количеством повторений
    ◦    Базовые структуры данных
    ◦    одномерные массивы и работа с ними
    ◦    двумерные массивы и работа с ними
    ◦    пользовательские объекты, их свойства и методы
    ◦    понятие ассоциативного массива и принципы работы с ним
    ◦    формат JSON
    ◦    особенности работы со строками
    ◦    особенности работы с датами
    •    Основы работы с системой контроля версий
    •    Функции
    ◦    описание функции
    ◦    вызов функции
    ◦    параметры функций
    ◦    передача параметров из точки вызова в функцию
    •    Построение простого графического интерфейса (GUI)
    ◦    Формы и работа с элементами управления на web-формах
    ◦    События, обработка событий мыши

    """
    let phpBase = CourseDescription()
        phpBase.courseDescriotion = """
        У PHP есть три причины удостоить его вниманием: он простой в изучении, он стабильный, он надёжный. Язык PHP один из самых популярных для web-разработки. Wikipedia, Facebook, интернет-магазины — его заслуга.

        В конце курса вы усвоите базовые конструкции PHP, научитесь работать с массивами и создадите собственный интернет-магазин.
        """
        phpBase.courseSkills = """
        Чему вы научитесь?
        — Ориентироваться в синтаксисе языка PHP, писать чистый код

        — Понимать особенности back end-разработки и принцип работы веба
        
        Чего не будет
        — Теории без практики
        — Устаревших механик работы
        — Пересказа чужих лекций и книг
        — Вопросов без ответа
        — Основам разработки небольшого проекта

        — Работать с cookie и sessions

        — Понимать основы HTTP-протокола
        """
        phpBase.courseProgram = """
        1. Основы языка PHP

        •    Переменные, константы.
        •    Выражения, операторы.
        •    Типы данных и приведения типов.
        •    Управляющие конструкции.
        2. Работа с массивами




        •    Циклы.
        •    Массивы.
        •    Работа с ассоциативными массивами.
        3. Основы работы с системой контроля версий





        4. Функциональное программирование




        •    Функции.
        •    Область видимости переменных.
        •    Суперглобальные переменные.
        •    Строгая типизация.
        5. Обзор встроенных функций




        •    Обзор встроенных функций ( функции для работа со строками, с массивами).
        •    Рекурсия.
        •    Стили кодирования.
        6. Фильтрация, валидация данных и работа с формой




        •    Работа с веб-формами.
        •    Прием и обработка данных от пользователя.
        •    Фильтрация и валидация данных.
        •    Основы HTTP протокола.
        •    Что собой представляют заголовки ответа и запроса.
        7. Cookie, Sessions




        •    Регулярные выражения.
        •    Работа с cookie.
        •    Sessions.
        •    Отличия sessions и cookies, их совместное использование.
        8. Реляционная модель баз данных




        •    SQL – язык запросов.
        •    Запросы на выборку данных.
        •    Работа с join.
        •    Работа с множествами.
        9. Работа над совместным проектом 'Интернет-магазин'




        •    Разбор архитектурных решений в проекте.
        •    Знакомство с шаблонами отображения.
        •    Создание CMS в проекте.

        """
    
    let phpAdvanced = CourseDescription()
    phpAdvanced.courseDescriotion = """
    В процессе обучения Вы познакомитесь с методами и свойствами объектно-ориентированного программирования и шаблонами проектирования. Также узнаете о протоколах HTTP, MIME-типах контента и управлении кэшем. Мы научим Вас передавать и хранить важную информацию, шифровать и хэшировать. Вы научитесь распознавать атаки и бороться с ними, узнаете об инъекциях SQL и кода. Мы познакомим Вас с фреймворками и MVC, расскажем об архитектуре, структуре проекта, конфигурации, установке и настройке. Вы обучитесь удаленному администрированию и настройке хостинга. По завершении продвинутого курса Вы станете полноценным специалистом в области PHP.
    """
    phpAdvanced.courseSkills = """
    •    Владеть PHP в совершенстве
    •    Выполнять сложные проекты, в т.ч. с использованием фреймворков
    •    Претендовать на должность Junior Developer в ІТ-компаниях
    •    Брать проекты на фрилансе
    •    Организовать собственный стартап
    """
    phpAdvanced.courseProgram = """
    •    Основы Linux
    ◦    Установка Ubuntu
    ◦    Серверная и десктопная версия
    ◦    Базовые команды Linux
    ◦    Установка веб-сервера Nginx
    ◦    Установка PHP
    ◦    Установка MySQL
    ◦    Деплой Symfony-приложения на DigitalOcean
    •    Git-основы
    ◦    Установка и настройка
    ◦    Команды Git
    ◦    Обзор GitHub, GitLab и Bitbucket
    ◦    Создание проекта и заливка на GitHub
    •    Composer
    ◦    Установка и настройка
    ◦    Автозагрузчик классов
    ◦    Обзор официального репозитория Packagist
    ◦    Создание собственных пакетов
    •    PHP 7.x
    ◦    Новые возможности PHP 7.0
    ◦    Новые возможности PHP 7.1
    ◦    Новые возможности PHP 7.2
    ◦    Новые возможности PHP 7.3
    ◦    Новые возможности PHP 7.4
    •    ООП
    ◦    Инкапсуляция
    ◦    Наследование
    ◦    Полиморфизм
    ◦    Классы и Объекты
    ◦    Абстрактные классы
    ◦    Интерфейсы
    ◦    Методы класса
    ◦    Статические методы
    ◦    Магические методы
    ◦    Константы
    ◦    Трейты
    ◦    Исключения
    ◦    Неймспейсы
    ◦    Автозагрузка
    ◦    Композиция вместо наследования
    •    Стандарты PSR
    ◦    Обзор стандартов PSR-0, PSR-4 и PSR-1, PSR-2
    •    Шаблоны проектирования, SOLID, DRY, KISS, YAGNI
    ◦    Основные порождающие шаблоны
    ◦    Основные структурные шаблоны
    ◦    Основные поведенческие шаблоны
    •    Reflection API
    ◦    PHPDoc
    ◦    phpDocummentor
    ◦    Аннотации
    •    Standard PHP Library (SPL)
    ◦    Структуры данных
    ◦    Итераторы
    ◦    Основные классы и функции
    •    Безопасность в PHP
    ◦    Основные типы атак
    ◦    Шифрование
    ◦    Хеширование
    ◦    Стандартные практики по защите веб-приложений
    ◦    Symfony Security компонент
    •    Отладка, предупреждение ошибок, профилирование, оптимизация
    ◦    Какие бывают типы ошибок в PHP, иерархия классов исключений
    ◦    Конструкция try-catch-finally
    ◦    Создание собственных классов исключений
    ◦    Логирование ошибок и его важность
    ◦    Профилирование кода
    ◦    Отладка xDebug, анализ чужого кода
    •    REST
    ◦    Обзор архитектуры REST
    ◦    Модель зрелости REST-сервисов
    ◦    HATEOAS
    ◦    Стандарт HAL
    ◦    Спецификация JsonAPI
    ◦    Клиент Guzzle
    ◦    FOSRestBundle для Symfony
    •    Тестирование
    ◦    Юнит тесты
    ◦    Функциональные тесты
    ◦    Фреймворки для тестирования Codeception, PHPUnit, Symfony PHPUnit Bridge
    ◦    CI-сервисы: Travis CI, Scrutinizer CI
    •    Использование Docker. Контейнеризация приложения
    ◦    Введение в docker
    ◦    Что такое контейнер?
    ◦    Отличие docker от vagrant
    ◦    Введение в docker-compose
    ◦    Создание LEMP стека на базе docker
    •    СУБД MySQL
    ◦    Объединение таблиц
    ◦    Индексы
    ◦    Оптимизация запросов и команда EXPLAIN
    ◦    Транзакции
    ◦    Триггеры и хранимые процедуры
    ◦    Движки InnoDB & MyISAM
    •    Сервисная архитектура
    ◦    Понятие сервисов
    ◦    Контейнеры
    ◦    Dependency Injection
    •    Обзор популярных фреймворков
    ◦    Zend Framework
    ◦    Yii Framework
    ◦    Phalcon Framework
    ◦    Laravel Framework
    ◦    Symfony Framework
    •    MVC и Symfony4 фреймворк
    ◦    Установка и настройка
    ◦    Создание простой страницы
    ◦    Роутинг
    ◦    Twig
    ◦    Doctrine ORM
    •    Компоненты Symfony
    ◦    Yaml
    ◦    Filesystem
    ◦    Finder
    ◦    Console
    ◦    Process
    ◦    PHPUnit Bridge
    ◦    Validator
    ◦    Form

    """
    return [fundomentals, phpBase, phpAdvanced]
}
