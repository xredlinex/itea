//
//  PythonDescript.swift
//  IteaIOSDip
//
//  Created by alexey sorochan on 12/2/19.
//  Copyright © 2019 alexey sorochan. All rights reserved.
//

import Foundation
import UIKit

func pythonDescription() -> CoursesTypeDescription {
    let python = CoursesTypeDescription()
    python.typeDescription = """
    Курсы Python
    — комплексная программа обучения языку программирования Рython. Рython ориентирован на повышение продуктивности фронтенда и читабельности его кода. Язык прост в использовании, но в то же время его библиотека насчитывает большой выбор полезных функций, необходимых для создания веб-дизайна.
        Курс Python состоит из четырех направлений: • Базовый курс Python (уроки python с нуля знакомят начинающих разработчиков с основами программирования на данном языке). • Углубленный курс Python позволит вам полноценно использовать язык питон для написания программ. • Курс Python для Data Science предназначен для раскрытия функционала языка в рамках обработки больших объемов данных и машинного обучения. • Веб-разработка на Python / Django дает возможность профессионально разрабатывать коммерческие веб-приложения, используя Django-фреймворк Наши преподаватели – опытные специалисты из IТ-компаний, предлагают комплексный подход к изучению среды разработки Рython. Курс занятий эффективно объединяет теоретические основы обучения с их практическим применением. Кроме овладения профессиональными навыками работы с Рython, обучение предполагает прокачку и soft skills, которые помогут эффективно использовать личностный и творческий потенциал разработчика. Окончив курс Python с высокими баллами, вы можете получить предложение пройти стажировку с возможностью дальнейшего трудоустройства в топовых компаниях IТ-рынка.
    
    """
    python.typeLevelDescription = """
    •    Понимать принципы программирования
    •    Проектировать структуру программ
    •    Создавать программы среднего уровня сложности на языке Python
    •    Создавать небольшие инструментальные программы
    •    Разрабатывать зрелые программы на языке Python
    """
    return python
}

func pythonCoursesDescrioption() -> [CourseDescription] {
    let pythonBase = CourseDescription()
    pythonBase.courseDescriotion = """
    Базовый курс Python Programming – программа изучения программирования на Python для начинающих. Курс является введением в обучение Python и охватывает основные аспекты программирования с его использованием. Изучение Python с нуля дает возможность познакомиться с ключевыми понятиями языка для дальнейшего овладения им на Продвинутом курсе Python.
    """
    pythonBase.courseSkills = """
    •    Понимать принципы программирования
       •    Проектировать структуру программ
       •    Создавать программы среднего уровня сложности на языке Python
       •    Создавать небольшие инструментальные программы
    """
    pythonBase.courseProgram = """
    Зачем нужны компьютерные программы?
    ◦    Программирование как творческий процесс
    ◦    Архитектура компьютера
    ◦    В чем суть программирования?
    ◦    Процесс «общения» с Python
    ◦    Интерпретатор и компилятор
    ◦    Процесс написания программ
    ◦    Что же такое программа?
    ◦    Принципы программирования
    ◦    Парадигмы программирования
    ◦    Упражнения
    •    Переменные, выражения и инструкции Python
    ◦    Понятие «значение» и «тип»
    ◦    Переменные
    ◦    Имена переменных и ключевые (зарезервированные) слова
    ◦    Операторы
    ◦    Операторы и операнды
    ◦    Выражения
    ◦    Порядок операций
    ◦    Срочные операции
    ◦    Ввод данных
    ◦    Комментарии
    ◦    Упражнения
    •    Основы работы с системой контроля версий
    •    Управление потоком выполнения
    ◦    Логические выражения
    ◦    Логические операторы
    ◦    Условное выполнение
    ◦    Последовательность условий
    ◦    Вложенные условия
    ◦    Перехват исключений с использованием try и except
    ◦    Упражнения
    •    Итерации
    ◦    Обновления переменной
    ◦    Инструкция while
    ◦    Бесконечные циклы
    ◦    «Бесконечные циклы» и break
    ◦    Завершение итерации с помощью continue
    ◦    Списки
    ◦    Определение циклов с помощью for
    ◦    Обход списков с помощью цикла for
    ◦    Упражнения
    •    Функции и модули
    ◦    Вызов функции
    ◦    Встроенные функции
    ◦    Функции приведения типов
    ◦    Случайные числа
    ◦    Математические функции
    ◦    Добавление новых функций
    ◦    Определение и использование
    ◦    Параметры функции
    ◦    Модульные тесты
    ◦    Имена файлов и пути
    ◦    Создание собственных модулей и пакетов
    ◦    Инициализация пакета
    ◦    Обработка аргументов командной строки
    ◦    Определение параметров среды выполнения
    ◦    Создание виртуальных сред
    ◦    Автоматическая инициализация пакетов
    ◦    Упражнения
    •    Строки
    ◦    Строка - это последовательность
    ◦    Получение длины строки с использованием len
    ◦    Обход через строку с помощью цикла
    ◦    Срез строки
    ◦    Строки являются неизменными
    ◦    Оператор in
    ◦    Сравнение строк
    ◦    Строчные методы
    ◦    Разбор (parsing) строк
    ◦    Оператор форматирования
    ◦    Регулярные выражения
    ◦    Упражнения
    •    Файлы
    ◦    Введение
    ◦    Открытие файлов
    ◦    Текстовый файл и строки
    ◦    Чтение файлов
    ◦    Поиск через файл
    ◦    Оператор with
    ◦    Запись файлов
    ◦    Упражнения
    •    Коллекции
    ◦    Списки и кортежи
    ◦    Методы списков
    ◦    Объекты и значения
    ◦    Словари и множества
    ◦    Словарь как набор счетчиков
    ◦    Словари и файлы
    ◦    Циклы и словари
    ◦    Множества
    ◦    Упражнения
    •    Элементы функционального программирования
    ◦    Функция объект первого класса
    ◦    Функции, зависящие от функций
    ◦    Замыкания
    ◦    Лямбда-функции
    ◦    Декораторы
    ◦    Упражнения
    •    Объектно-ориентированное программирование
    ◦    Определение класса
    ◦    Поля и методы класса
    ◦    Инкапсуляция
    ◦    Наследование
    ◦    Полиморфизм
    ◦    "Утиная" типизация
    ◦    Упражнения

    """
    let pythonAdvanced = CourseDescription()
    pythonAdvanced.courseDescriotion = """
    Курс предназначен для тех, кто уже владеет основами разработки на Pythonи желает освоить продвинутые умения и навыки программирования на Python.
    Курс также будет полезен уже квалифицированным пользователям. Программа построена по принципу 20% лекционного материала, 80% лабораторные работы.
    """
    pythonAdvanced.courseSkills = """
        •    Разрабатывать программы на языке Python
    """
    pythonAdvanced.courseProgram = """
    •    Функции.
    ◦    Типы данных
    ◦    Встроенные контейнеры
    ◦    Операторы контроля выполнения
    ◦    Обработка ошибок (try ... except ...)
    ◦    Операторы циклов
    ◦    Comprehensions (list, dict, set)
    ◦    Создание функции и процедур
    ◦    Аргументы функций
    ◦    Рекурсивные функции
    ◦    Functors, Currying
    ◦    Декораторы
    ◦    Lambda-функции
    ◦    PEP8
    •    Объектно-ориентированный подход
    ◦    Объявление класса и создание экземпляра
    ◦    Принципы ООП (подражание, инкапсуляция, полиморфизм) в Python
    ◦    Область видимости (Namespaces, Scope, правило LEGB)
    ◦    Method Resolution Order (MRO)
    ◦    Магические методы
    ◦    Определение математических операций для объектов Python
    ◦    Определение операций сравнения для объектов Python
    ◦    Определение операций хеширования для объектов Python
    ◦    Создание копии экземпляра класса, deep copy, shallow copy
    ◦    Инкапсуляция (Setters and getters)
    •    Управление созданием экземпляров класса
    ◦    Doc strings
    ◦    Meta-классы
    ◦    Abstract Bases-классы
    ◦    __new__
    ◦    __init__
    ◦    Context-managers
    ◦    Использованием декораторов с классами
    ◦    Контейнеры, созданные путем наследования (UserList, UserDict, UserString)
    ◦    Контейнеры, созданные путем агрегации
    ◦    Методы доступа к элементам контейнера
    ◦    Iterators, Generators
    •    Приемы объектно-ориентированного программирования
    ◦    Software Engineering как процесс
    ◦    Язык UML
    ◦    Принципы SOLID
    ◦    Метрики качества кода
    ◦    Design Patterns (категории, примеры использования)
    ◦    Singletone
    ◦    Facade
    ◦    Interface
    ◦    Proxy
    ◦    Abstract Factory
    ◦    Factory Method
    ◦    Command
    ◦    Observer
    •    Модули и пакеты
    ◦    Разработка модулей (определение и запуск)
    ◦    Система импорта
    ◦    Разработка повторно используемых пакетов
    ◦    Менеджер пакетов pip и виртуальные среды virtualenv
    ◦    Setup.py
    ◦    Написание документации к пакету, модулю
    ◦    Создание приложений на основе пакетов
    •    Работа с файлами
    ◦    Работа с системой контроля версий Git
    ◦    Форматирования строк
    ◦    Context-managers
    ◦    Работа с файловой системой (os, os.path, shutil)
    ◦    Сериализация с помощью pickle
    ◦    Управление порядком сериализации/десериализации объектов Python
    ◦    Сериализация данных в json
    ◦    Сериализация данных в xml
    •    Встроенные пакеты Python.
    ◦    Работа с datetime и calendar
    ◦    Работа с collections (очереди, именуемые кортежи, вложенные словари)
    ◦    Работа с heapq, array, enum
    ◦    Работа с числовыми данными (numbers, math, decimal, random)
    ◦    Работа с contextlib
    ◦    Работа с functools
    ◦    Logging
    ◦    Unittest
    •    Networking
    ◦    Sockets (основы работы, примеры серверов)
    ◦    Socket server
    ◦    Socket Client
    ◦    HTTP
    ◦    HTML, парсинг HTML-файлов
    ◦    XML
    •    Многопоточность в Python
    ◦    Global Interpreter Loc (GIL)
    ◦    Создание потоков в Python
    ◦    Контроль доступа к ресурсам
    ◦    Синхронизация потоков
    ◦    Создание потоков с помощью пакета concurent
    ◦    Пул потоков
    •    Процессы в Python
    ◦    Пакет multiprocessing
    ◦    Interprocess communication
    ◦    Очереди задач
    ◦    Создание процессов с помощью пакета concurent
    ◦    Пул процессов
    ◦    Отсрочка задач с помощью пакета sched
    •    Асинхронное программирование
    ◦    Asyncio
    ◦    Пакет Twisted
    ◦    Асинхронный фреймворк Aiohttp
    ◦    Сбор данных с помощью фреймворка Scrapy
    •    SQL
    ◦    Основы реляционных баз данных
    ◦    ER-диаграммы
    ◦    Стандарт PEP249
    ◦    Работа с СУБД SQLite, PostgreSQL
    ◦    Основы языка SQL (SELECT, LIKE, ORDER BY, LIMIT)
    ◦    INSERT
    ◦    UPDATE
    ◦    DELETE
    ◦    JOIN (INNER, LEFT, OUTER)
    ◦    GROUP BY
    ◦    Функции SQL (mean, min, max, avg, count)
    ◦    Subqueries
    •    Object Relational Mapping
    ◦    Основы работы с SQLAlchemy
    ◦    Механизм сессий в SQLAlchemy
    ◦    Создание базы данных с помощью моделей SQLAlchemy
    ◦    Миграции баз данных с помощью Alembic
    •    NoSQL-базы данных
    ◦    CAP теорема
    ◦    Типы NoSQL баз данных
    ◦    Работа с Redis
    ◦    Работа с Memcached
    ◦    Работа с MongoDB
    ◦    Брокер сообщений RabbitMQ
    ◦    Основы работы с Celery
    •    Web-разработка
    ◦    Классификация web frameworks
    ◦    Язык шаблонов Jinja2
    ◦    Основы API
    ◦    Стандарты API (REST, XML-RPC, Swagger, JSON API)
    ◦    Архитектурный подход API First
    ◦    Основы работы с Flask

    """
    let django = CourseDescription()
       django.courseDescriotion = """
        Django - свободный фреймворк для веб-приложений на языке Python. Интуитивно понятный язык шаблонов, имеет мощные и эффективные средства работы с базами данных и сессиями, встроенные средства авторизации пользователей и администрирования. Все это позволяет быстро и качественно разрабатывать веб-приложения коммерческого уровня.
        Записавшись на курс, вы сможете в короткие сроки овладеть описанными возможностями фреймворка, а также применить их на практике в рамках выполнения учебного проекта.
       """
       django.courseSkills = """
        •    Профессионально разрабатывать коммерческие веб-приложения с использованием Django
       """
       django.courseProgram = """
        •    Введение в Django.
        ◦    Запуск проекта.
        ◦    Файл settings.py
        ◦    Основные принципы работы.
        •    Базы данных. Модели.
        ◦    Понятие модели.
        ◦    Создание модели.
        ◦    Связи в базе данных.
        •    Система URL-адресов.
        ◦    Slug-адреса.
        ◦    Динамические адреса.
        ◦    Статические адреса.
        ◦    Namespace.
        •    Шаблонизатор.
        ◦    Система шаблонов.
        ◦    Фильтры.
        ◦    Теги.
        ◦    Создание своих фильтров, тегов.
        •    Практика.
        •    Формы, валидаторы форм.
        ◦    Форма на основании моделей.
        ◦    html-форма.
        ◦    Django-forms.
        •    Сlass-based views
        •    Аутентификация/авторизация/регистрация пользователей.
        •    Отправка сообщений на почту/телеграмм.
        •    Практика.
        •    Создание rest-api.
        ◦    django-rest-framework.
        •    Введение в front end.
        ◦    Базовые принципы языка JavaScript.
        ◦    Базовые понятия CSS.
        ◦    Настройка front end-части проекта.
        •    Библиотека jquery. Фреймворк Vue.js.
        ◦    Технология ajax.
        ◦    Использование REST-API.
        ◦    Реактивные данные.
       """
    
    let science = CourseDescription()
       science.courseDescriotion = """
        Как понять, достаточно ли вы сильны для прохождения этого курса? Просто дайте самому себе ответы на следующие вопросы: интересует ли вас работа с данными (таблицами данных), манипуляции с ними и их визуализация? Помните ли вы из школы /университета/работы суть понятий «медиана», «мода», «распределение вероятностей»? Если ответы положительные, то у вас хорошие шансы на успешное прохождение курса.   Этот курс будет полезен:
            •    Специалистам, которые хотят начать карьеру в Data science;
            •    Специалистам по Data science, которые еще не освоили возможности работы с данными в Python или R;
            •    Специалистам, работающим с данными (аналитикам, бизнес-аналитикам, исследователям), которые хотят освоить новые гибкие инструменты для работы с данными.
          Философия курса: обратите внимание, что этот курс не сделает из вас полноценных разработчиков на Python или R. С точки зрения data science, это, в первую очередь, два удобных инструменты для выполнения рабочих задач.
       """
       science.courseSkills = """
        •    Понимать основные алгоритмы машинного обучения и практически их использовать для задач классификации и регрессии;
        •    Анализировать данные и строить модели машинного обучения с помощью Python i R;
        •    Делать качественные и интерактивные визуализации данных.
       """
       science.courseProgram = """
    •    Модуль 1. Введение в машинного обучения и Data science
    ◦    Определение машинного обучения и науки о данных, их задачи.
    ◦    Инструментарий для анализа данных: языки программирования Python и R.
    ◦    Типы машинного обучения.
    ◦    Составные части модели машинного обучения.
    ◦    Базовые концепты машинного обучения.
    •    Модуль 2. Основы языков программирования Python и R для Data science
    ◦    IDE для удобной работы: Jupyter, Spyder & Rstudio.
    ◦    Семантика языка.
    ◦    Типы данных.
    ◦    Структуры данных.
    ◦    Операторы контроля исполнения (разветвления и циклов).
    ◦    Векторизация в Python (numpy) i R.
    •    Модуль 3. Функциональное программирование в Python и R
    ◦    Comprehension, Generators, Iterators в Python.
    ◦    Функции в Python i R.
    ◦    Встроенные функции Python.
    ◦    Apply-family функции в R.
    ◦    Библиотека purrr для функционального программирования в R.
    •    Модуль 4. Исследование и подготовка данных к анализу
    ◦    Numpy.
    ◦    Pandas.
    ◦    Фильтрация и агрегация данных в dplyr.
    ◦    Long & wide форматы таблиц, их преобразования в библиотеках pandas & tidyr.
    •    Модуль 5. Визуализация данных в R i Python
    ◦    Визуализация данных в R.
    ◦    ggplot2 - grammar of graphics.
    ◦    Интерактивная графика в R.
    ◦    Matplotlib & seaborn.
    •    Модуль 6. Основные понятия статистического анализа
    ◦    Scipy.stats.
    ◦    Описательные статистики.
    ◦    Зависимости между переменными.
    •    Модуль 7. Типичные проблемы в подготовке данных к анализу
    ◦    Преобразование факторных переменных.
    ◦    Борьба с пробелами в данных.
    ◦    Проблема мультиколлинеарности.
    ◦    Шкалирования данных.
    ◦    Выбор информативных переменных для модели.
    ◦    Типичный алгоритм подготовки данных к моделированию.
    •    Модуль 8. Базовые регрессионные модели
    ◦    Линейная регрессия.
    ◦    Полиномиальная регрессия.
    ◦    Метод ближайших соседей.
    ◦    Метрики оценки качества регрессии.
    ◦    Тюнинг регрессионных моделей.
    •    Модуль 9. Базовые модели классификации
    ◦    Логистическая регрессия.
    ◦    Метод опорных векторов.
    ◦    Наивный Байесовский классификатор.
    ◦    Метрики оценки качества классификации.
    ◦    Тюнинг параметров моделей классификации.
    •    Модуль 10. Базовые модели кластеризации и снижения размерности
    ◦    Метод к-средних.
    ◦    Иерархический кластерный анализ.
    ◦    DBSCAN.
    ◦    Анализ.
    ◦    Кореспонденс-анализ.
    •    Модуль 11. Деревья решений и ансамбли
    ◦    Базовые древовидные модели.
    ◦    Random forest.
    ◦    Xgboost, lightgbm.
    ◦    Тюнинг гиперпараметров в ансамблевых моделях.
    •    Модуль 12. Методы улучшения качества моделей машинного обучения
    ◦    Аугментация.
    ◦    Feature engineering.
    ◦    Cross-validation.
    ◦    Борьба с переобучением.
    ◦    Борьба с дисбалансом данных.
    ◦    Регуляризация модели.
    •    Модуль 13. Вступление в нейронных сетей. Нейронные сети для классификации изображений
    ◦    Keras.
    ◦    tensorflow.
    ◦    Персептрон.
    ◦    CNN.
    •    Модуль 14. Прогнозирование временных рядов
    ◦    AR, MA, ARMA.
    ◦    ARIMA.
    ◦    VAR.
    ◦    Lstm.
    •    Модуль 15. Документация data science проектов, data science in prod
    ◦    Пути организации продакшна для data science-проектов.
    ◦    Специфика документации data science проектов.
    ◦    Markdown, Latex.
    •    Модуль 16. Практикум по пути улучшения качества моделей
    ◦    Презентация и обсуждение курсовых проектов
    ◦    Подведение итогов курса

    """
    
    return [pythonBase, pythonAdvanced, django, science]
}

