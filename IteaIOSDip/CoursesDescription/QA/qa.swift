//
//  qa.swift
//  IteaIOSDip
//
//  Created by alexey sorochan on 11/18/19.
//  Copyright © 2019 alexey sorochan. All rights reserved.
//

import UIKit

func qaTypeDescription() -> CoursesTypeDescription {
    let qa = CoursesTypeDescription()
    qa.typeDescription = """
     Программа курсов тестирования ПО — многоуровневое обучение тестированию программного обеспечения. Во время курса вы овладеете необходимыми hard skills — основными профессиональными навыками тестеров, а также прокачаете soft skills, которые помогут вам задействовать свой личностный и творческий потенциал. Окончив курс QA вы сможете претендовать на вакансию Junior-тестировщика. Кто такой QA-программист и где он востребован? QA-специалист тестирует качество продукта разработки ПО. Он играет в игру, юзает приложение или серфит по сайту, чтобы найти ошибки и сообщить о них. Цель QA-тестировщика – выпустить качественный продукт. IT-компании предлагают среднюю зарплату QA-специалисту с нуля, который окончил курсы тестировщика QA, от 200 $! А чтобы стать Junior`ом, вам необходимо иметь лишь базовые умения и навыки тестирования.
    """
    qa.typeLevelDescription = """
        + Создавать тест-кейсы и правильно объединять их в наборы
        + Находить баги и писать отчеты о них
        + Владеть разными методиками и видами тестирования
        + Понимать цикл разработки ПО
        + Писать простые автотесты
        + Создавать отчеты и анализировать их
    """
    return qa
}

func qaCoursesDescrioption() -> [CourseDescription] {

//  MARK: - QA BASE DESCRIPTION
    let qaBase = CourseDescription()
    qaBase.courseDescriotion = """
    Базовый курс QA – программа обучения тестированию ПО с нуля.

    Курс  QA для начинающих включает овладение основными навыками и умениями проведения полноценного процесса тестирования. На QA-курсах вы познакомитесь с фундаментальными понятиями тестирования, научитесь создавать тест-кейсы, узнаете, как находить баги и научитесь создавать отчеты.

    На уроках QA-тестирования вы будете создавать реальные тест-кейсы и изучите все виды и уровни тестов.

    Базовый курс QA – начальная ступень комплексной программы обучения тестированию, после которой вы сможете приступить к изучению Продвинутого курса QA и курса Автоматизированного тестирования.
    """
    qaBase.courseSkills = """
    + Понимать важность тестирования как неотъемлемой части разработки и внедрения программных продуктов
    + Использовать на практике все виды и уровни тестов
    + Находить баги и писать отчеты о них
    + Создавать тест-кейсы и правильно их объединять в наборы
    + Разбираться в каждой стадии QA-процесса

    """
    qaBase.courseProgram = """
    Введение в тестирование ПО.
    Что такое тестирование. Для чего нужно тестирование программного обеспечения
    Жизненный цикл разработки ПО
    Основные документы, которые используются в процессе жизненного цикла разработки ПО
    Для чего нужен Test Plan и как его составлять
    Техника тест дизайна (Equivalence Partitioning, Boundary Values)
    Test Case как основной артефакт тестировщика
    Когда Test Case бывает негативный
    Составление тестового набора для первой тестируемой программы
    Понятие дефекта.
    Что такое баг
    Зачем и где описывать Bug report
    Что такое severity и priority
    Жизненный цикл дефекта
    Системы отслеживания ошибок. Обзор самых популярных систем
    Знакомство с багтрекинговой системой Jira. Описание багов в системе
    Виды требований.
    Виды документов с требованиями к программному обеспечению
    RDD
    SRS
    PRD
    BRD
    Критерии тестирования требований
    Полнота
    Однозначность
    Непротиворечивость
    Реализуемость
    Отслеживаемость
    Тестируемость
    Тестируем регистрационную форму. Специфика тестирования полей электронный адрес и телефон.
    Методологии тестирования.
    Проектная команда. Виды методологий тестирования программного обеспечения
    Водопадная модель
    V-модель
    Итеративная модель
    RUP
    MSF
    Agile
    SCRUM
    Спринт
    Резерв проекта
    Резерв спринта
    Диаграмма выгорания
    Стори Поинт
    Остановка Спринта
    Покер Планирования
    Встречи в Скраме
    Виды тестирования программного обеспечения.
    Функциональное тестирование
    Нефункциональное тестирование
    Тестирование, связанное с изменениями
    Use Case и Check List.
    Что такое Use Case. Для чего нужен. Чем Use Case отличается от Test Case
    Что такое Check List. Где и когда применяют Check List. Может ли Check List заменить Test Case
    Как составить Use Case и Check List на примере тестирования любого предмета
    Случайное тестирование и тестирование без требований
    Ad-Hoc – процесс тестирования без спецификации
    Exploratory – исследовательское тестирование
    Когда применять и для каких проектов
    Применение на практике
    Системы хранения и управления тестовыми случаями.
    Ознакомление с системой TestLink (Easy QA)
    Написание тестовых случаев в системе TestLink (Easy QA)
    Нефункциональные виды тестирования.
    Тестирование производительности
    Нагрузочное тестирование (Performance and Load Testing)
    Стрессовое тестирование (Stress Testing)
    Тестирование стабильности или надежности (Stability / Reliability Testing)
    Объемное тестирование (Volume Testing)
    Тестирование установки (Installation testing)
    Тестирование удобства пользования (Usability Testing)
    Конфигурационное тестирование (Configuration Testing)
    С помощью каких инструментов проводят и для чего
    Контроль полученных знаний.
    Пример стандартного собеседования
    Реальные задачи
    Что такое Pairwise Testing.
    Попарное тестирование. Когда, как и зачем применяется
    PICT - самый простой инструмент для автоматизации таких проверок

    """
//  MARK: - QA ADVANCED DESCRIPTION
    let qaAdvanced = CourseDescription()
    qaAdvanced.courseDescriotion = """
    Продвинутый курс QA разработан для детального изучения всех существующих возможностей, методов, моделей и жизненных циклов, а также новейших методик тестирования программного обеспечения. Хороший специалист прекрасно понимает, как важна безукоризненная работа программного продукта, которым будут пользоваться миллионы людей по всему миру. Именно поэтому высококвалифицированный тестировщик на сегодня является одним из самых востребованных специалистов в мировой IT-индустрий. Мы научим вас быстрой отладке ПО. Результатом наших совместных усилий будет ваша уверенность в завтрашнем дне как хорошо подготовленного специалиста, способного уже не предлагать свои услуги работодателям, а выбирать только самые лучшие предложения на рынке труда.
    """
    qaAdvanced.courseSkills = """
    Претендовать на должность младшего мануального тестировщика ПО
    Сдать сертификационный экзамен ISTQB Foundation
    """
    qaAdvanced.courseProgram = """
    Основные понятия BDD, TDD, ATDD
    Введение в Gherkin синтаксис
    Практические упражнения по написанию Сценариев
    Введение в HTML - язык разметки гипертекста
    Стандарт HTML. Структура HTML-документа
    Создание HTML-документа
    Создание гиперссылок
    Списки и таблицы
    Введение в CSS
    Типы стилей
    Базовый синтаксис CSS
    Селекторы тегов
    Automation Testing basics
    Что такое XML - расширяемый язык разметки
    Язык XHTML. Разница между HTML и XML
    XML Path Language (Xpath) — язык запросов к элементам xml или xhtml
    Синтаксис XPath. Простые запросы с помощью XPath
    Автоматизированные тесты с помощью Selenium IDE
    Selenium - инструмент, используемый для разработки тестовых сценариев
    Язык команд Selenium
    Создание тестовых сценариев c Selenium IDE
    Часто используемые команды Selenium
    Достоинства и недостатки автоматизации тестирования
    Процесс внедрении автоматизации тестирования
    Что автоматизировать?
    ROI в автоматизации тестирования - коэффициент окупаемости инвестиций
    Зачем измерять эффективность?
    Автоматизация с помощью Selenium IDE
    Что такое База данных
    Виды баз данных
    Реляционная БД
    Системой Управления Баз Данных (СУБД)
    Язык SQL
    SQL- стандарты
    Работа с базами данных в SQL Server
    Создание базовых запросов SELECT
    Объединение таблиц
    Сортировка данных в результате запроса
    Расширенная фильтрация данных
    Как выбрать неповторяющиеся значения из базы данных
    Логический оператор LIKE
    Статистические функции
    MySQL
    Группирование данных
    Предложение HAVING
    Выбор данных из нескольких таблиц
    Вложенный запрос
    Написание выражений используя разные типы JOIN
    MySQL
    Написание простого выражения CASE
    Хранимые процедуры
    Введение в тестирование мобильных приложений
    Виды мобильных приложений
    Особенности тестирования мобильных приложений
    Сервисы для бета-тестирования
    Облачные платформы устройств для тестирования мобильных приложений
    Мобильное тестирование на эмуляторах мобильных устройств
    Что такое Web Service?
    Протокол SOAP
    Структура протокола SOAP
    Язык описания web-сервисов WSDL
    Тестирование веб-сервисов
    SoapUI - кроссплатформенное клиентское оконное приложение
    Функциональное тестирование веб-сервисов
    Создание Test Case с помощью SOAP UI
    REST (Representational state transfer) – стиль архитектуры программного обеспечения для распределенных систем, таких как World Wide Web
    Управление информацией сервиса
    RESTful-системы
    Использование Rest-запросов при тестировании web-сервисов
    Инструмент POSTER для вызова запросов в API интерфейсе
    Создание GET запросов с помощью SOAP UI
    """

//  MARK: - QA AUTOMATION DESCRIPTION
    let qaAutomation = CourseDescription()
    qaAutomation.courseDescriotion = """
     Курс включает в себя основы программирования с нуля для тех, кто хочет заняться автоматизацией тестирования, но не знает с чего начать. В ходе практических занятий и домашних работ будут освоены все основные вопросы по автоматизации тестирования Web-приложений с использованием языка программирования Java. По окончанию курса, каждый студент научится самостоятельно настраивать процесс автоматизации и структуру тестового фреймворка, что соответствует уровню Middle QA Automation.
    """
    qaAutomation.courseSkills = """
    Анализировать задачу и строить алгоритмы программы, используя условные и циклические конструкции
    Работать с переменными и реализовывать несложные математические операции
    Работать с функциями, событиями
    Анализировать и объяснять поведение простых программ, включающих конструкции, рассмотренные в курсе
    """
    qaAutomation.courseProgram = """
    Работа с IntelliJ IDEA (редактором для Java-кода)
    Работа с GIT и GitHub (cистемой контроля версий)
    Понятие алгоритма и роль алгоритмов в программировании
    Переменные, типы данных, выражения и присваивание значений переменным
    Базовый ввод/вывод данных
    Конструкции с условиями и их разновидности
    Итеративные конструкции (циклы) и их разновидности
    Базовые структуры данных
    Функции. Описание, вызов, параметризация
    Классы и обьекты
    Использование основных принципов ООП
    Работа с HTML как с DOM-структурой. Значение CSS для HTML-страниц
    Виды WebElement-локаторов в Selenium WebDriver
    Язык запросов xPath для использования в качестве WebElement локаторов
    Использование принципов OOP при создании собственного тестового фреймворка
    Использование паттернов PageObject и PageFactory при создании собственного тестового фреймворка
    Debug и отладка кода тестов на основе стектрейса ошибки
    Использование testNG фреймворка для удобства работы с тестами
    Использование DataProvider для параметризированных тестов
    Использование Maven для тестового фреймворка
    Использование логгеров при работе автотестов
    Работа с Jenkins для запуска тестов (continuous integration-система)
    """
    return [qaBase, qaAdvanced, qaAutomation]
}


